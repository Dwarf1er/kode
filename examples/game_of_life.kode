SET BOARD_SIZE TO 6.
SET BOARD TO 12673.
SET ITERATIONS TO 6.

SET ITER TO 0.

WHILE ITER LESS THAN ITERATIONS DO
	SET I TO 0.
	
	SET NEXT_BOARD TO 0.
	WHILE I LESS THAN BOARD_SIZE DO
		SET J TO 0.
		SET ROW TO "".

		WHILE J LESS THAN BOARD_SIZE DO
			SET BIT_OFFSET TO J PLUS I TIMES BOARD_SIZE.
			SET BOARD_OFFSET TO BOARD BAND 1 SHL BIT_OFFSET.
			SET IS_ALIVE TO IF BOARD_OFFSET GREATER THAN 0 THEN TRUE ELSE FALSE END.
			SET TOKEN TO IF IS_ALIVE THEN "X" ELSE "_" END.
			SET ROW TO ROW PLUS TOKEN.

			SET NEIGHBOR_COUNT TO 0.

			SET DI TO -1.
			WHILE DI LESS THAN 2 DO
				SET DJ TO -1.

				WHILE DJ LESS THAN 2 DO
					IF DI EQUALS 0 AND DJ EQUALS 0 THEN ELSE
						SET NEIGHBOR TO BIT_OFFSET PLUS DI TIMES BOARD_SIZE PLUS DJ.
						SET VALID TO TRUE.

						IF DJ EQUALS -1 AND NEIGHBOR MOD BOARD_SIZE EQUALS BOARD_SIZE MINUS 1 THEN
							SET VALID TO FALSE.
						END

						IF DJ EQUALS 1 AND NEIGHBOR MOD BOARD_SIZE EQUALS 0 THEN
							SET VALID TO FALSE.
						END

						IF NEIGHBOR LESS THAN 0 THEN
							SET VALID TO FALSE.
						END

						IF NEIGHBOR GREATER THAN BOARD_SIZE TIMES BOARD_SIZE THEN
							SET VALID TO FALSE.
						END

						IF VALID THEN
							SET NEIGHBOR_OFFSET TO BOARD BAND 1 SHL NEIGHBOR.
							IF NEIGHBOR_OFFSET GREATER THAN 0 THEN
								SET NEIGHBOR_COUNT TO NEIGHBOR_COUNT PLUS 1.
							END
						END
					END

					SET DJ TO DJ PLUS 1.
				END

				SET DI TO DI PLUS 1.
			END

			SET NEXT_ALIVE TO FALSE.

			IF IS_ALIVE AND NEIGHBOR_COUNT EQUALS 2 THEN
				SET NEXT_ALIVE TO TRUE.
			END

			IF NEIGHBOR_COUNT EQUALS 3 THEN
				SET NEXT_ALIVE TO TRUE.
			END

			IF NEXT_ALIVE THEN
				SET NEXT_BOARD TO NEXT_BOARD BOR 1 SHL BIT_OFFSET.
			END

			SET J TO J PLUS 1.
		END

		SHOW ROW.

		SET I TO I PLUS 1.
	END

	SHOW "".

	SET BOARD TO NEXT_BOARD.
	SET ITER TO ITER PLUS 1.
END
